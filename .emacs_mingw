;;
;; env
;;

;; PATH
(setenv "PATH"
        (concat
         "C:\\msys64\\usr\\bin;"              ;; Msys2
	 (concat (getenv "M2_HOME") "\\bin;") ;; Maven
         (getenv "PATH")))

;; for Cider
(setq exec-path (append exec-path '("/usr/bin")))

;; ウィンドウサイズの設定
;; 最大化する命令の定義
(defvar w32-window-state nil)

(defun w32-fullscreen-switch-frame ()
  (interactive)
  (setq w32-window-state (not w32-window-state))
  (if w32-window-state
      (w32-fullscreen-restore-frame)
    (w32-fullscreen-maximize-frame)
    ))

(defun w32-fullscreen-maximize-frame ()
  "Maximize the current frame (windows only)"
  (interactive)
  (w32-send-sys-command 61488))

(defun w32-fullscreen-restore-frame ()
  "Restore a minimized/maximized frame (windows only)"
  (interactive)
  (w32-send-sys-command 61728))

(add-hook 'window-setup-hook
          '(lambda () (w32-fullscreen-maximize-frame))
          )

;; MSYS関連設定
(defun msyssetup ()
  ;; Shell Mode
  ;; MSYS の bash を使用します。
  (setq explicit-shell-file-name "c:/msys64/usr/bin/bash.exe")
  (setq shell-file-name "c:/msys64/usr/bin/sh.exe")
  ;; SHELL で ^M が付く場合は ^M を削除します。
  (add-hook 'shell-mode-hook
  	    (lambda ()
  	      (set-buffer-process-coding-system 'undecided-dos 'sjis-unix)))
  (add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
  ;; shell-mode での保管(for drive letter)
  (setq shell-file-name-chars "~/A-Za-z0-9_^$!#%&{}@`'.,:()-"))

;;ツールバー不要
(tool-bar-mode -1)

;; 対応するカッコを強調表示
(show-paren-mode t)

;; 矩形範囲選択
(cua-selection-mode t)
(setq cua-enable-cua-keys nil) ; デフォルトキーバインドを無効化

;; trailing-whitespace
(add-hook 'before-save-hook 'delete-trailing-whitespace)

;; Add package-archives
(require 'package)
;; MELPAを追加
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
;; MELPA-stableを追加
(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
(package-initialize)

;; Emacsのカラーテーマ
;; color
(load-theme 'deeper-blue t)
(unless (package-installed-p 'anzu)
  (package-refresh-contents) (package-install 'anzu))
(unless (package-installed-p 'dash)
  (package-refresh-contents) (package-install 'dash))

;; 行数を表示させる
(require 'linum)
(global-linum-mode)

;; magit
(unless (package-installed-p 'magit)
  (package-refresh-contents) (package-install 'magit))
(require 'magit)

;; UTF-8でソースを書くための設定
(setenv "LANG" "ja_JP.UTF-8")

;; 文字コード
(prefer-coding-system 'utf-8-unix)

;; バックアップを残さない
(setq make-backup-files nil)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   (quote
    (markdown-mode d-mode scala-mode julia-mode pig-mode cider clojure-mode peg go-mode meghanada magit dash anzu))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

;; Go
(unless (package-installed-p 'go-mode)
  (package-refresh-contents) (package-install 'go-mode))
(add-to-list 'auto-mode-alist '("\\.go$" . go-mode))

;; Clojure
(unless (package-installed-p 'clojure-mode)
  (package-refresh-contents) (package-install 'clojure-mode))
(add-to-list 'auto-mode-alist '("\\.clj$" . clojure-mode))
;; REPL
(unless (package-installed-p 'cider)
  (package-refresh-contents) (package-install 'cider))
(require 'cider)

;; Julia
(unless (package-installed-p 'julia-mode)
  (package-refresh-contents) (package-install 'julia-mode))
(require 'julia-mode)

;; Scala
(unless (package-installed-p 'scala-mode)
  (package-refresh-contents) (package-install 'scala-mode))
(add-to-list 'auto-mode-alist '("\\.scala$" . scala-mode))

;; octave
(autoload 'octave-mode "octave" nil t)
(setq auto-mode-alist
      (cons '("\\.m$" . octave-mode) auto-mode-alist))

;; apache pig
(add-to-list 'auto-mode-alist '("\\.pig$" . pig-mode))

;; Go
(unless (package-installed-p 'markdown-mode)
  (package-refresh-contents) (package-install 'markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md$" . markdown-mode))
